#!/usr/bin/swift

import Foundation

class IPv4 {
	var value0Ô∏è‚É£: Int!
	var value1Ô∏è‚É£: Int!
	var value2Ô∏è‚É£: Int!
	var value3Ô∏è‚É£: Int!

	init(value0Ô∏è‚É£:Int, value1Ô∏è‚É£:Int, value2Ô∏è‚É£:Int, value3Ô∏è‚É£:Int) {
		self.value0Ô∏è‚É£ = value0Ô∏è‚É£
		self.value1Ô∏è‚É£ = value1Ô∏è‚É£
		self.value2Ô∏è‚É£ = value2Ô∏è‚É£
		self.value3Ô∏è‚É£ = value3Ô∏è‚É£
	}

	init(StringIp:String) {
    	let ipArray = StringIp.split(separator: ".")
    	self.value0Ô∏è‚É£ = Int(ipArray[0])
		self.value1Ô∏è‚É£ = ipArray.count > 1 ? Int(ipArray[1]) : 0
		self.value2Ô∏è‚É£ = ipArray.count > 2 ? Int(ipArray[2]) : 0
		self.value3Ô∏è‚É£ = ipArray.count > 3 ? Int(ipArray[3]) : 0
	}

	convenience init() {
		self.init(value0Ô∏è‚É£:0,value1Ô∏è‚É£:0,value2Ô∏è‚É£:0,value3Ô∏è‚É£:0)
}

	var intValue: UInt32 {
		get {
			var ‚Ü™Ô∏è:UInt32=UInt32(value3Ô∏è‚É£)
			‚Ü™Ô∏è+=UInt32(value2Ô∏è‚É£*1000)
			‚Ü™Ô∏è+=UInt32(value1Ô∏è‚É£*1000000)
			‚Ü™Ô∏è+=UInt32(value0Ô∏è‚É£*1000000000)
			return ‚Ü™Ô∏è
		}

		set(IntIP) {
			var remainder:UInt32!=IntIP
			self.value0Ô∏è‚É£=Int(remainder%1000)
			remainder=remainder/1000

			self.value1Ô∏è‚É£=Int(remainder%1000)
			remainder=remainder/1000

			self.value2Ô∏è‚É£=Int(remainder%1000)
			remainder=remainder/1000

			self.value3Ô∏è‚É£=Int(remainder%1000)
			remainder=remainder/1000
		}
	}

	var strValue: String {
		get {
			return String(value0Ô∏è‚É£)+"."+String(value1Ô∏è‚É£)+"."+String(value2Ô∏è‚É£)+"."+String(value3Ô∏è‚É£)
		}

		set(StringIp) {
			let ipArray = StringIp.split(separator: ".")
			self.value0Ô∏è‚É£ = Int(ipArray[0])
			self.value1Ô∏è‚É£ = ipArray.count > 1 ? Int(ipArray[1]) : 0
			self.value2Ô∏è‚É£ = ipArray.count > 2 ? Int(ipArray[2]) : 0
			self.value3Ô∏è‚É£ = ipArray.count > 3 ? Int(ipArray[3]) : 0
		}
	}
}

class RouteItem {

	var NetworkDestination: IPv4
	var Netüé≠: IPv4 
	var Gateway: IPv4 
	var Interface: IPv4 
	var Metric: Int

	init(dst:IPv4, üé≠:IPv4, gate:IPv4, interface:IPv4, cost:Int) {
		self.NetworkDestination=dst
		self.Netüé≠=üé≠
		self.Gateway=gate
		self.Interface=interface
		self.Metric=cost
	}

	convenience init(dst:IPv4, üé≠:IPv4, out:IPv4) {
		self.init(dst:dst, üé≠:üé≠, gate:out, interface:out, cost:1)
	}


	convenience init(dst:IPv4, üé≠:IPv4, out:IPv4, cost:Int) {
		self.init(dst:dst, üé≠:üé≠, gate:out, interface:out, cost:cost)
	}

	func CheckSubNet(ip:IPv4) -> Bool {
		return self.NetworkDestination.intValue == (ip.intValue & self.Netüé≠.intValue) 
	}

	func toString() -> String {
		return "[Route Item] - NetDst= \(NetworkDestination.strValue) - NetMask= \(Netüé≠.strValue) - Gateway= \(Gateway.strValue) - Interface= \(Interface.strValue) - Metric= \(Metric)"
	}
}


func getTableFromüíª() -> [RouteItem] {
	var table:[RouteItem]=[]
	var üé≤:String=" "
	while üé≤ != "E" {
		print ("Digite um comando abaixo:") 
		print ("--------------------------------------") 
		print ("S - Exibe a tabela de roteamento")
		print ("A - Adicionar um novo item na tabela")
		print ("R - Remover um item da tabela")
		print ("D - Carregar a tabela padr√£o")
		print ("E - Salvar tabela e sair do menu")
		print ("--------------------------------------") 

		let line:String=readLine() ?? " "
		üé≤ = line.prefix(1).uppercased()

		switch üé≤ {
			case "S":
				for (i,item) in table.enumerated(){
					print ("Id: \(i) - \(item.toString())")
				}
			case "A":
				print ("Digite o IP da rede (x.x.x.x)")
				let üåêIP:IPv4=IPv4(StringIp: readLine() ?? "0.0.0.0")

				print ("Digite a mascara da rede (x.x.x.x)")
				let üé≠:IPv4=IPv4(StringIp: readLine() ?? "0.0.0.0")

				print ("Digite o Gateway da rede (x.x.x.x)")
				let gate:IPv4=IPv4(StringIp: readLine() ?? "0.0.0.0")

				print ("Digite a Interface da rede (x.x.x.x)")
				let inter:IPv4=IPv4(StringIp: readLine() ?? "0.0.0.0")

				print ("Digite o custo da rota")
				let cost:Int=Int(readLine() ?? "1") ?? 1

				table.append(RouteItem(dst:üåêIP, üé≠:üé≠, gate:gate, interface:inter, cost:cost))

			case "R":
				for (i,item) in table.enumerated(){
					print ("Id: \(i) - \(item.toString())")
				}
				print ("Digite o Id do elemento a ser deletado ou 'E' para sair desta op√ß√£o")

				let to‚ùå:Int=Int(readLine() ?? "-1") ?? -1

				if to‚ùå>=0 && to‚ùå<table.count{
					table.remove(at: to‚ùå)
				}

			case "D":
				table.removeAll()
				table.append(RouteItem(dst: IPv4(StringIp:"0.0.0.0"), üé≠:IPv4(StringIp:"0.0.0.0"), out:IPv4(StringIp:"0.0.0.0")))

			case "E":
				print ("Tabela de roteamento criada com sucesso")

			default:
				print ("Erro, op√ß√£o (\(üé≤)) invalida")
		}
	}

	return table
}

extension Array where Element == RouteItem{
	func route(IP:IPv4) -> IPv4? {
		var defaultGate:RouteItem? = nil
		for item in self {
			if (item.Netüé≠.intValue==item.NetworkDestination.intValue  && item.Netüé≠.intValue==IPv4().intValue){
				defaultGate=item
			}
			if item.CheckSubNet(ip:IP) {
				return item.Interface
			}
		}
		if let defaultGate = defaultGate{
			return defaultGate.Interface
		}
		return nil
	}
}


extension String{
	public func splitedBy(length: Int) -> [String] {
		var result = [String]()
		for i in stride(from: 0, to: self.count, by: length) {
			let endIndex = self.index(self.endIndex, offsetBy: -i)
			let startIndex = self.index(endIndex, offsetBy: -length, limitedBy: self.startIndex) ?? self.startIndex
			result.append(String(self[startIndex..<endIndex]))
		}
		return result.reversed()
	}
}

var RouteTable: [RouteItem] = getTableFromüíª()
